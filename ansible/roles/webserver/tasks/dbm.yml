- name: Run Django 'makemigrations dojo' command
  django_manage: command='makemigrations dojo' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'makemigrations' command
  django_manage: command='makemigrations' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'migrate' command
  django_manage: command=migrate app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'syncdb' command
  django_manage: command=syncdb app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'loaddata' command for product_type
  django_manage: command='loaddata product_type' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'loaddata' command for test_type
  django_manage: command='loaddata test_type' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Run Django 'loaddata' command for development_environment
  django_manage: command='loaddata development_environment' app_path={{ dd_install_dir }} virtualenv={{ venv_dir }}
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Find any running DD instances on our gunicorn port
  shell: "ps aux | grep '[r]unserver' | grep '{{ gunicorn_port }}' | awk '{print $2}'"
  register: instances
  ignore_errors: True

- name: Kill zombie DD instances
  shell: "kill {{ instances.stdout }}"
  when: instances.stdout
  ignore_errors: True

- name: Start DD
  shell: '. {{ venv_dir }}/bin/activate && nohup {{ venv_dir }}/bin/python {{ dd_install_dir }}/manage.py runserver 0.0.0.0:{{ gunicorn_port }} >>{{ gunicorn_log_file }} 2>&1 &'
  sudo: yes
  sudo_user: '{{ dd_user }}'

- name: Port check
  wait_for: port={{ gunicorn_port }} delay=10 timeout=20
  ignore_errors: True

- name: Instance Availability Check
  get_url: url='http://localhost:{{ gunicorn_port}}/' dest=/tmp/url_check force=True
  register: availability
  ignore_errors: True

- name: Instance Failure Check
  fail: msg="Instance failed to start. Fix any errors that have been reported during the provisioning process, and try running 'vagrant provision' again. Also ensure that you're not using an old VirtualBox instance by checking the output of 'virtualbox list vms'."
  when: "availability.changed and 'OK' not in availability.msg"

- name: Post-Install Message
  debug: msg='DefectDojo is now running on 192.168.13.37:{{ gunicorn_port }}!'
  when: "'OK' in availability.msg"
